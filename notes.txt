wide field tests, using shredder input to sub neighbors
-------------------------------------------------------

run-shred-test01
    - em5 for psf, 1.0e-5 tol, uberseg
    just DES0432-4831 currently

run-shred-test02
    - em3 for psf, 1.0e-5 tol, uberseg
    just DES0432-4831 currently

run-shred-test03
    - em5 for psf, ml 0.001 tol, uberseg
    relying on nbr subtraction
    just DES0432-4831 currently

    time dominated by em5 psf fitting now
    if this looks good and we can use 0.001 for tol, can maybe speed
    up psf fitting
        - use guess from result of last psf fit
        - use coellip with 5

    the bright stars actually look very similar in size-mag diagram, but
    there is a lot more scatter compared to 1.0e-5 (run-shred-test01) at
    the faint end, even compared to using em3

run-shred-test04
    - em5, exp3, em tol 0.001 ml tol 0.0001, uberseg
    - changing too much at once but will e going home soon...

run-shred-test05
    - same as run-shred-test01 but with using last guess in em fitting,
    speeds em stuff up by factor of 2

run-shred-test06
    - same as run-shred-test05 but with tol 1.0e-7
    - more failures but the actual fluxes look quite similar

run-shred-test07
    - same as run-shred-test05 but with tol weight set to 'weight' rather than
    'uberseg'
    - failure rate higher
    - fluxes agree extremely well

conclusion, just stick with 1.0e-5 and uberseg


SN etc. fields
------------

legend
* means still running
- means finished

Current favored runs
============

- run-ugriz-mof02
    - fixed masking

- run-ugriz-mof01
    - combining COSMOS C3 X3 E2
    - lots of failures in E2
			   flagname     val      num  fraction
	----------------------------------------------
				no_data       2     5400  0.00962733
			obj_failure      16     5713  0.0101854
		  high_maskfrac      32       96  0.000171153
		 too_few_pixels      64      576  0.00102692
	----------------------------------------------
				  total     511    11785  0.0210108
		fof_size frac_fail
		1 0.009164695866048624
		2 0.020014295925661188
		3 0.060755336617405585
		4 0.11688311688311688
		5 0.16666666666666666
		6 0.0
		7 0.0

	- C3 not small
			   flagname     val      num  fraction
	----------------------------------------------
				no_data       2     3002  0.00432183
			obj_failure      16     5844  0.00841332
		  high_maskfrac      32       27  3.88706e-05
		 too_few_pixels      64      629  0.00090554
	----------------------------------------------
				  total     511     9502  0.0136796
		fof_size frac_fail
		1 0.0065261661146520595
		2 0.01936545240893067
		3 0.06388308977035491
		4 0.12860892388451445
		5 0.22972972972972974
		6 0.4
		7 0.5
		8 1.0
		9 0.0

* run-sn-JHK-ff02
    - C3/X3/E2 using models from run-ugriz-mof01

injection runs
==============

- run-inject-stars03
    - em5 looks great
- run-inject-gals01
    - em5
- run-inject-stars-gs01
    - injection for linear pars

all runs
=========

* run-cosmos-ugriz-mof07
    - run on coadds with new convergence
    - will check with simulation

* run-cosmos-ugriz-mof06
    - new masks
    - fitvd v0.9.9
    - mof v0.9.4
    - ftol 1.0e-7 to see if we can get out of the rut

- run-C3X3-ugriz-mof01
    - new masks
    - use maxfev calculation in MOF, tolerances at 1.e-5
    - fitvd v0.9.9
    - mof v0.9.4
    - C3 done
    - X3 running
    - failure rate vs group size doesn't look so great

* run-E2-ugriz-mof01
    - new masks
    - use maxfev calculation in MOF, tolerances at 1.e-5
    - fitvd v0.9.9
    - mof v0.9.4


GS based
* run-cosmos-ugriz-gsmof01
    - using n=2
    - was offsetting psf
    - conc looks off

* run-cosmos-ugriz-gsmof02
    - using n=2
    - not offsetting psf
        - worse
    - maybe need to set offset of psf image and then
    offset it when drawing too

* run-cosmos-i-gsmof01
    - similar

* run-cosmos-i-loghlr01
    - gs fitter with log10(hlr) as parameter, with normal prior
    - similar
* run-cosmos-i-loghlr02
    - flat prior on log hlr
* run-cosmos-i-loghlr03
    - tried joint prior but fitter is getting stuck
    in local minima
* run-cosmos-i-loghlr04
    - wider normals on log flux and log hlr

* run-cosmos-ugriz-gsmof04
    - wide normals on log flux and log hlr




- run-cosmos-ugriz-mof05
    - new masks
    - use maxfev calculation in MOF, tolerances at 1.e-5
    - fitvd v0.9.9
    - mof v0.9.4
    - failure rate vs group size looks great
    - looks like fitter gets stuck with bad guesses, e.g.
      seeing the locus at T=0.025 which is the fallback guess


run-dessof-fullmeds02
    - griz cosmos run with full meds from medsconf y3deep

run-sn-griz-mof01
    - note this got over-written, need to revert it
run-sn-griz-mof02
    - using tolerances I figured out for multi-epoch cosmos
    fits.  maybe overkill for coadd work but should be consistent
run-sn-griz-mof03
    - tight cen prior, guess from gauss
run-sn-griz-mof04
    - positive flux, tight cen prior, guess from gauss
    - don't do this!

* run-sn-griz-mof05
    - reverted to master, not using guess from gauss, using
      tight cen prior, looser 1.0e-5 for both
    - running this one for more tiles

* run-sn-ugriz-mof01
    - will compare with u FF
    - X3 compares well with run-sn-griz-mof05
    - C3 a little worse but probably acceptable
* run-sn-JHK-ff01
    - using run-sn-ugriz-mof01 for models and fofs


run-cosmos-griz-mof01 (forgot to exclude the coadd)
run-cosmos-griz-mof02
     The fitvd*yaml files are the same for these
     runs differ by chunksize, smaller for cosmos due to running
     on full MEDS files

     no guesses from SOF

     - ngmix v1.3.4
     - mof v0.9.2
     - fitvd v0.9.5.1


run-cosmos-ugriz-mof01
    - new meds files from DESDM
    - new masks
    - tight tolerances on fitter
    - size-mag diagram looks bad for C32
    - try C46

run-cosmos-ugriz-mof02
    - use guess of size based on psf
    - looks same
run-cosmos-ugriz-mof03
    - using my meds files
    - still crap, maybe it is u?


run-cosmos-griz-mof04
    - after ugriz fails on both mine and desdm meds files
      for cosmos, trying griz with new meds files
    - looks like shit, maybe it is the tile? 32?  same for 46


run-cosmos-ugriz-mof04
    - use convergence pars from mof03 which looks fine
    - this one looks ok....
run-cosmos-ugriz-mof05
    - use calculated maxfev, gives ~4000 same as mof03 for 1 obj
      but scales.  3 times higher than default lm



run-dessof-gs03
    - running on original cosmos coadd with galsim fitter to use full psf model
    - the psc have all the jacobian centers set to the canonical center,
      which means the center was not measured in this new coadd so the
      shifts could be large, and indeed they do seem to be larger for the
      psc

    - compared to gs02 which used postage stamp coadds and had tight cen
      prior, the concentrations are off from zero
        - is it the coadd psf or the cen prior?
        - could re-do the psf fluxes with the new centers, but that will mean
        setting cen on all the observations in place, which could have
        consequences
        - could put back prior and restrict to 32x32 to speed things up?
        - 32x32 with weight rather than uberseg?

    - re-running with 32x32 and tight cen prior to see if looks better
        - still looks shitty
    - re-running with psc coadds and 32x32 stamp size cut, tight prior on cen,
      uberseg
        - looks ok, running more

run-dessof03
    - SN same as dessof02 but adding mask flags and fof size

run-desmof01
    - SN des only ugriz mof run using dessof03 as guesses

run-vd13
    - video + des
    - MOF run, no guesses from SOF
    - incorporating new object masks

run-dmask09low
    - cosmos des only ugriz

run-uvd02
    - COSMOS joint des and uvista ugrizJHK
    - with mask info

run-dessof-psc01
    - cosmos r band only postage stamp coadds run



run-vd09
    - fitvd-deep08
    - ugrizY JHKs

run-vd12
    - fitvd-vd12
    - griz only with circular mask (should have named it fitvd-des*)

run-desuseg01
    - fitvd-desuseg01
    - griz only with uberseg

run-desusegmask01
    - fitvd-desusemaskg01
    - griz only with uberseg and star mask preventing masked objects
      being part of a group

run-dessof01
    - fitvd-dessof01
    - griz sof run
    - need to run on more than 3 tiles

run-vdff01
    - fitvd-vdff01
    - using dessof01 for forced photometry deblending
    - super high failure rate, 10%

run-vdsof01
    - fitvd-vdsof01
    - ugrizYJHKs sof run
    - need to run on more than 3 tiles

run-cosmos-sof01
    - fitvd-cosmos-sof01
    - sof on cosmos with ugrizYJHKs

run-dmask01
    - first go with bright star mask
    - much improved

run-dmask02
    - Additional automated masking of trails etc.

run-dmask03
    - added trimming of bounds, improved trails etc.

run-dmask04g
    - less generous linking of groups
    - did not run

run-dmask05g
    - even less generous linking of groups

			   flagname     val      num  fraction
	-------------------------------------------
				no_data       2       46  9.29494e-05
			psf_failure       8        2  4.04128e-06
			obj_failure      16      963  0.00194588
		 too_few_pixels      64      376  0.00075976
	----------------------------------------------
				  total     511     1387  0.00280263

		fof_size frac_fail
		1 0.0006837788996487863
		2 0.006667768777208354
		3 0.028544243577545196
		4 0.07988165680473373
		5 0.13432835820895522
		6 0.3333333333333333
		7 0.8
		8 1.0
		9 0.0

run-dmask06cen
    - looser cen prior, didn't help

run-dessof02
    - ugriz SOF run
			   flagname     val      num  fraction
	----------------------------------------------
				no_data       2       33  6.66811e-05
			psf_failure       8        1  2.02064e-06
			obj_failure      16      398  0.000804214
		 too_few_pixels      64      271  0.000547593
	----------------------------------------------
				  total     511      703  0.00142051


run-dmask07guess
    - guess from dessof02
    - same fof pars as 05g
	  on C3_C09 it is worse than 05g
			   flagname     val      num  fraction
	----------------------------------------------
			obj_failure      16      163  0.0147605
		 too_few_pixels      64        5  0.000452776
	----------------------------------------------
				  total     511      168  0.0152133

	but these are mainly failures for fof size 1, which
	means the guessing isn't going so well maybe

	fof_size frac_fail
	1 0.014968566011376111
	2 0.007211538461538462
	3 0.022727272727272728
	4 0.08333333333333333
	5 0.0

	compare to that particular one on 05g; it aint helping

	fof_size frac_fail
	1 0.0007983235206067259
	2 0.014423076923076924
	3 0.045454545454545456
	4 0.08333333333333333
	5 0.0


    doing simpler guesses for cen, shape, and fracdev seems to
    help

               flagname     val      num  fraction
    ----------------------------------------------
            obj_failure      16       43  0.00389387
         too_few_pixels      64        5  0.000452776
    ----------------------------------------------
                  total     511       48  0.00434664

    fof_size frac_fail
    1 0.0031932940824269036
    2 0.009615384615384616
    3 0.022727272727272728
    4 0.0
    5 0.0

    full

               flagname     val      num  fraction
    ----------------------------------------------
                no_data       2       46  9.29494e-05
            psf_failure       8        1  2.02064e-06
            obj_failure      16      664  0.0013417
         too_few_pixels      64      376  0.00075976
    ----------------------------------------------
                  total     511     1087  0.00219643


    fof_size frac_fail
    1 0.0005194943588240779
    2 0.005235025073014823
    3 0.017602283539486202
    4 0.04142011834319527
    5 0.11940298507462686
    6 0.16666666666666666
    7 0.2
    8 0.5
    9 0.0

run-dmask09low
    - guess from SOF dessof02
    - raise tolerances for the groups and those not fit in SOF
			   flagname     val      num  fraction
	----------------------------------------------
			 no_attempt       1        0  0
				no_data       2       46  9.29494e-05
			image_flags       4        0  0
			psf_failure       8        1  2.02064e-06
			obj_failure      16       59  0.000119218
		  high_maskfrac      32        0  0
		 too_few_pixels      64      376  0.00075976
	 all_centers_masked     128        0  0
		  fof_too_large     256        0  0
	----------------------------------------------
				  total     511      482  0.000973948

	fof_size frac_fail
	1 1.7760490899968474e-05
	2 0.0011572160687716977
	3 0.0014272121788772598
	4 0.0
	5 0.0
	6 0.0
	7 0.0
	8 0.0
	9 0.0


run-uvd01
    - ugrizJHKs run with full MOF, no guesses from SOF (probably should
    do that though)
run-uvd02
    - rerunning with mask info

run-uvff01
    - using results from dmask09low for ff; due to how the code
    works, need to do ff on a des band also to get sizes for
    the FoF finding. Used r

    getting lots of failures with singular

Note there might be astrometry issue that could cause some
of the failures

fracdev priors

    run-vd04
        - fracdev truncated norm, very liberal
        failure with object_flags 3.2% in C09

    run-vd05
        - fracdev truncated norm [0,1] far fewer failures but
        magdiff with v04 skewed
        failure with object_flags 0.9% in C09

        Also seems to get stuck more in a local minimum at e.g. fracdev=1
        and this is not that uncommon

    run-vd06
        - fracdev prior sinh scale 0.2, looks quite similar to v04 in magdiff
        failure a bit better than v04
        failure with object_flags 3.0% in C09

    run-vd07
        - fracdev prior sinh scale 0.1
        failure with object_flags 3.4% in C09

    run-vd08
        - fracdev prior sinh scale 0.3
        failure with object_flags 3.2% in C09

    run-vdexp01
        - exp
        2.3% failures of object_flags

    run-vdexp02
        - exp ,shifted log-normal T
        2.8% failures of object_flags

    run-vdtcen01
        - fitvd-tcen01 bdf model, but with
              cen prior sigma 0.05 (rather than 0.263 as usual)
        - 2.7% failures of object_flags
            - comparable to the exp model, so maybe this is important

        - if this works, should maybe try with fracdev just normal

    run-dtcen01
        - same as vdtcen01 but des only
        - 2.0% failure

    run-vdfdz01
        - prior centered at zero for fracdev
        2.4%

    run-d02
        - fitvd-deep07
        - griz only
        - fracdev normal 0.5/0.1 with [0,1] bounds
        - cen 0.05

    run-d03
        - fitvd-d03
        - similar to run-wide04t for wide field
        - griz only
        - trimming images
        - fracdev normal 0.5/0.3 with [-3,4] bounds
        - cen 0.001


wide field
----------
- run-wide01t
    - fitvd-wide01t
    - full deblending
    - circular mask
- run-wide02t
    - fitvd-wide02t
    - full deblending
    - uberseg
    - some 0.02 level mag differences showing up

- run-wide03t
    - fitvd-wide03t
    - same as wide02t but better bounds handling, fracdev [0,1]

- run-wide04t
    - fitvd-wide04t
    - added
        - outlier rejection
        - trim images to [32, 64]
        - very tight cen bounds
        - fracdev prior gauss 0.5/0.3
            - loose bounds on fracdev [-3,4]
        - flat T/flux bounds
        - in code fixing bad flux guesses

- run-rad01t
   - fitvd-rad01t
   - same as wide04t but with twice the maximum allowed radius
     very little change except that it runs slower and there
     are more failures


- run-wide05t
    - test with different TdByTe, don't use

- run-wide06t
    - fitvd-wide04t
    - fracdev prior gauss 0.5/0.3
        - bounds on fracdev [-0.18, 2.0] safe for TdByTe=1
        - crazy high failure rate

- run-wide04t2
    - rerunning wide04t with new code to make sure still works ok
    - if looks ok, need to figure out why wide06t failed so bad
        - fracdev bounds
            - maybe there are real negative pixels its trying to fit?
        - coellip psf (seems unlikely)

- run-wide07t
    - fitvd-wide07t
    - same as fitvd-wide04t but with fracdev bounds [0, 1]
      and sigma 0.1

next may want to add trimming of stamps

- run-widesof01t
    - fitvd-widesof01t
    - no deblending
    - circular mask
    - mags strongly skewed compared to deblending run wide01t

- run-widesof02t
    - fitvd-widesof02t
    - no deblending
    - ubserseg
    - agrees better with deblending run wide01t
    - agrees best with deblending with uberseg, wide02t

- run-widesof03t
    - fitvd-widesof03t
    - same as widesof03t but better bounds handling, fracdev [0,1]
- run-widesof04t
    - fitvd-widesof04t
    - same as fitvd-wide04t but without FoF group finding

- run-widefdz01t
    - fitvd-widefdz02t
    - fracdev prior centered at zero
    - full deblending
    - uberseg
    - whoops, bad guesses, but might beok
    - hmm.offsets [0.009, 0.012, 0.014, 0.021]
    - failures are similar
    - the number of objects with fracdev < 0 is nearly half.  This might be ok
      but it worries me a bit

- run-widefdz02t
    - same as run-widefdz01t but fixed guess
    - even more than half with fracdev < 0 now
    - also larger offsets from fiducial run
                  [0.015, 0.015, 0.019, 0.025]
      medians still small though

- we think most faint galaxies look more like disks than bulges
- the prior should be closer to 0 than 1
- where should it be?  0.1 +/- 0.1 ?

# full bulge disk

- run-bd01t
    - fitvd-bd01t
    - full bulge+disk with prior on logTratio
    - fracdev [0,1]
    - fails for cluster example
    ! argh used coellip3
    - on test tile, which has a higher than usual failure
    rate anyway, seeing obj_failure 0.00932007 which is way high

- run-sofbd01t
    - fitvd-sofbd01t
    - obj_failure 0.88% not much better
    
- run-bd02t
    - fitvd-bd02t
    - fracdev [-4,3]
    - fails for cluster example
    ! argh used coellip3
    - obj_failure 0.0010037
 
- run-bd03t
    - fitvd-bd02t
    - fracdev [-0.25, 2.2]
    - fails for cluster example
    ! argh used coellip3
    - obj_failure 0.00136216
